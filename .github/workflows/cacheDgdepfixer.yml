# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    #continue-on-error: true
    
    defaults:
      run:
        shell: bash
        #working-directory: todo
    env:
      SHELL: /bin/bash


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: apt-get pre-reqs
        run: |
          sudo apt-get update 
          sudo apt-get install curl g++ build-essential python3-dev cmake libxerces-c-dev libexpat1-dev gfortran libhdf5-serial-dev git python3-venv python3-pip python3-tk mesa-common-dev libglu1-mesa-dev freeglut3-dev cm-super 
          
      - name: Bypass dgdepfixers problems
        run: |
          mv /home/runner/.profile /home/runner/.profile_DISABLED 
          echo 'if [ -f $HOME/.bashrc ]; then . $HOME/.bashrc; fi' >> /home/runner/.bash_profile 
          git config --global user.name "Lorem Ipsum" 
          git config --global user.email "dolor.sit@ess.eu"

      - name: cache dgdepfixer install
        id: cache-dgdepfixer
        uses: actions/cache@v2
        with:
          path: /home/runner/dgdepfixer_install
          key: ${{ runner.os }}-dgdepfixer

      - name: Create dgdepfixer
        if: steps.cache-dgdepfixer.outputs.cache-hit != 'true'
        run: |
          curl -OSsf https://storage.googleapis.com/dgdepfixer/dgdepfixer && chmod +x ./dgdepfixer
          ./dgdepfixer 
          ./dgdepfixer --create 
          . /home/runner/dgdepfixer_install/setup.sh 
    
      - name: cache Geant4
        id: cache-geant4
        uses: actions/cache@v2
        with:
          path: /home/runner/geant4-10.04.p03
          key: ${{ runner.os }}-Geant4--nodata
        
      - name: Install Geant4
        if: steps.cache-geant4.outputs.cache-hit != 'true'
        run: |
          . /home/runner/dgdepfixer_install/setup.sh 
          dgdepfixer --instsw=Geant4 --nodata
          mv /home/runner/dgdepfixer_install/extras/geant4-10.04.p03 /home/runner/
          ln -s /home/runner/geant4-10.04.p03 /home/runner/dgdepfixer_install/extras/geant4-10.04.p03
          ls /home/runner/dgdepfixer_install/extras
 
 
      - name: cache untarred geant4 data files
        id: cache-untarred-geant4-data-files
        uses: actions/cache@v2
        with:
           path: /home/runner/Geant4data
           key: untarred-geant4-data-files 
 
      - name: Download Geant4 gata and create symlinks
        if: steps.cache-geant4.outputs.cache-hit != 'true' || steps.cache-untarred-geant4-data-files.outputs.cache-hit != 'true'
        run: | 
          curl -OSsf https://storage.googleapis.com/dgdepfixer/geant4DataProvider.sh && chmod +x ./geant4DataProvider.sh
          . geant4DataProvider.sh

      - name: Setup again
        run: |
          . /home/runner/dgdepfixer_install/setup.sh
          ls ~/dgdepfixer_install/extras/geant4-10.04.p03/share/Geant4-10.4.3/data
        # file ~/dgdepfixer_install/extras/geant4-10.04.p03/share/Geant4-10.4.3/data/G4ABLA3.1
           
      - name: test dgcode
        run: |
          . bootstrap.sh
          dgbuild -a
          dgbuild -t
        working-directory: dg_dgcode
        
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v2
        if: always() # always run even if the previous step fails
        with: 
            report_paths: '/home/runner/work/testActions/testActions/dg_dgcode/.bld/testresults/dgtest_results_junitformat.xml'

      - name: Test Report
        uses: dorny/test-reporter@v1
        if:  always() # always run even if the previous step fails
        with:
          name: JEST Tests            # Name of the check run which will be created
          path: /home/runner/work/testActions/testActions/dg_dgcode/.bld/testresults/dgtest_results_junitformat.xml    # Path to test results
          reporter: jest-junit        # Format of test results

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action/composite@v1
        if: always()
        with:
          files: /home/runner/work/testActions/testActions/dg_dgcode/.bld/testresults/dgtest_results_junitformat.xml
    
