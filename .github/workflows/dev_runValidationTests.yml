name: 'dev_runValidationTests'

on:
  workflow_dispatch:
  
  schedule:
    - cron: '30 23 * * 0'  # 23:30 every Sunday

  workflow_call:  

jobs:
  validation-test:
    name: ${{ matrix.os }}.${{ matrix.CC }}.python-${{ matrix.python }}.dgcode-${{ matrix.build-flag }}
    strategy:
      fail-fast: false
      matrix: 
        include:
          # Ubuntu-20.04
          - { os: ubuntu-20.04, CC: gcc-10,   CXX: g++-10,     python: '3.9', build-flag: examine }
          - { os: ubuntu-20.04, CC: gcc-10,   CXX: g++-10,     python: '3.9', build-flag: release }
          - { os: ubuntu-20.04, CC: gcc-10,   CXX: g++-10,     python: '3.8', build-flag: examine }
          - { os: ubuntu-20.04, CC: gcc-10,   CXX: g++-10,     python: '3.8', build-flag: release }
          
          - { os: ubuntu-20.04, CC: gcc-9,    CXX: g++-9,      python: '3.9', build-flag: examine }
          - { os: ubuntu-20.04, CC: gcc-9,    CXX: g++-9,      python: '3.9', build-flag: release }
          - { os: ubuntu-20.04, CC: gcc-9,    CXX: g++-9,      python: '3.8', build-flag: examine }
          - { os: ubuntu-20.04, CC: gcc-9,    CXX: g++-9,      python: '3.8', build-flag: release }
          
          - { os: ubuntu-20.04, CC: clang-12, CXX: clang++-12, python: '3.9', build-flag: examine }
          - { os: ubuntu-20.04, CC: clang-12, CXX: clang++-12, python: '3.9', build-flag: release }
          - { os: ubuntu-20.04, CC: clang-12, CXX: clang++-12, python: '3.8', build-flag: examine }
          - { os: ubuntu-20.04, CC: clang-12, CXX: clang++-12, python: '3.8', build-flag: release }
           
          - { os: ubuntu-20.04, CC: clang-10, CXX: clang++-10, python: '3.9', build-flag: examine }
          - { os: ubuntu-20.04, CC: clang-10, CXX: clang++-10, python: '3.9', build-flag: release }
          - { os: ubuntu-20.04, CC: clang-10, CXX: clang++-10, python: '3.8', build-flag: examine }
          - { os: ubuntu-20.04, CC: clang-10, CXX: clang++-10, python: '3.8', build-flag: release }
         
          # Ubuntu-18.04
          - { os: ubuntu-18.04, CC: clang-9,  CXX: clang++-9,  python: '3.9', build-flag: examine }
          - { os: ubuntu-18.04, CC: clang-9,  CXX: clang++-9,  python: '3.9', build-flag: release }
          - { os: ubuntu-18.04, CC: clang-9,  CXX: clang++-9,  python: '3.6', build-flag: examine }
          - { os: ubuntu-18.04, CC: clang-9,  CXX: clang++-9,  python: '3.6', build-flag: release }
           
          - { os: ubuntu-18.04, CC: gcc-7,    CXX: g++-7,      python: '3.9', build-flag: examine }
          - { os: ubuntu-18.04, CC: gcc-7,    CXX: g++-7,      python: '3.9', build-flag: release, allow-failure: true }
          - { os: ubuntu-18.04, CC: gcc-7,    CXX: g++-7,      python: '3.6', build-flag: examine }
          - { os: ubuntu-18.04, CC: gcc-7,    CXX: g++-7,      python: '3.6', build-flag: release, allow-failure: true }
          
          - { os: ubuntu-18.04, CC: gcc-10,   CXX: g++-10,     python: '3.9', build-flag: examine }
          - { os: ubuntu-18.04, CC: gcc-10,   CXX: g++-10,     python: '3.9', build-flag: release }
          - { os: ubuntu-18.04, CC: gcc-10,   CXX: g++-10,     python: '3.6', build-flag: examine }
          - { os: ubuntu-18.04, CC: gcc-10,   CXX: g++-10,     python: '3.6', build-flag: release }
          
          # macOS 10.15
          - { os: macos-10.15,  CC: clang,    CXX: clang++,    python: default, build-flag: examine }
          - { os: macos-10.15,  CC: clang,    CXX: clang++,    python: default, build-flag: release }
          
          # macOS 11
          - { os: macos-11,     CC: clang,    CXX: clang++,    python: default, build-flag: examine }
          - { os: macos-11,     CC: clang,    CXX: clang++,    python: default, build-flag: release }
          
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.allow-failure == 1 }} 
    defaults:
      run:
        shell: bash
    env:
      SHELL: /bin/bash
      CC: ${{ matrix.CC }}
      CXX: ${{ matrix.CXX }}
      PROJECTS_DIR: projects

    steps:
      #- uses: actions/checkout@v2
      - name: Checkout testActions
        uses: actions/checkout@v2
        with:
          repository: MilanKlausz/testActions

      - name: Checkout dgcode_validation
        uses: actions/checkout@v2
        with:
          repository: MilanKlausz/dgcode_validation
          path: './dgcode_validation'

      - name: setup framework action
        id: setup-framework
        uses: ./.github/actions/setup
        with:
          PYTHON_VERSION: ${{ matrix.python }}
          PROJECTS_DIR: ${{ env.PROJECTS_DIR }}
          DGBUILD_FLAG: ${{ matrix.build-flag }}
         
      - name: test dgcode
        run: |
          . $GITHUB_WORKSPACE/dgdepfixerInstall/setup.sh
          export DGCODE_PKG_PATH="$GITHUB_WORKSPACE/dgcode_validation"
          . bootstrap.sh
          dgbuild -at --testexcerpts=20 --${{ matrix.build-flag }}
        working-directory: ${{ env.PROJECTS_DIR }}
        env:
          DGDEP_IGNOREBADSHEBANG: 1

      - name: Rename test result
        id: rename-test-result
        if: always() && steps.setup-framework.outcome == 'success'
        run: mv $GITHUB_WORKSPACE/${{ env.PROJECTS_DIR }}/.bld/testresults/dgtest_results_junitformat.xml $GITHUB_WORKSPACE/${{ env.PROJECTS_DIR }}/.bld/testresults/dgtest_results_junitformat_${{ matrix.os }}.${{ matrix.CC }}.python-${{ matrix.python }}.dgcode-${{ matrix.build-flag }}.xml

      - uses: actions/upload-artifact@v2  # upload test results
        if: always() && steps.rename-test-result.outcome == 'success'
        with:
          name: test-results-validations
          path: ${{ github.workspace }}/${{ env.PROJECTS_DIR }}/.bld/testresults/dgtest_results_junitformat_${{ matrix.os }}.${{ matrix.CC }}.python-${{ matrix.python }}.dgcode-${{ matrix.build-flag }}.xml

  report:
    name: Test reporting
    if: always()
    needs: validation-test
    runs-on: ubuntu-latest
    steps:

    - name: Download a single artifact
      uses: actions/download-artifact@v3
      with:
        name: test-results-validations
        path: artifact_dir

    # - name: Publish Test Report
    #   uses: mikepenz/action-junit-report@v3
    #   if: always() # run even if the previous step fails
    #   with:
    #     check_name: Validation Tests Report (mikepenz)
    #     report_paths: artifact_dir/dgtest_results_junitformat*.xml
  
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action/composite@v1
      if: always()
      with:
        check_name: Validation Tests Report (EnricoMi)
        files: artifact_dir/dgtest_results_junitformat*.xml
        report_individual_runs: "true"
        comment_mode: "off" #control pull request comments