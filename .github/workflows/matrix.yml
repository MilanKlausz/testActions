# This is a basic workflow to help you get started with Actions

name: Matrix (ubuntu-20.04, macos-10.15)

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    strategy:
      fail-fast: false
      matrix: 
        os: [ubuntu-20.04, macos-10.15]
    runs-on: ${{ matrix.os }}
    
    defaults:
      run:
        shell: bash
        #working-directory: todo
    env:
      SHELL: /bin/bash
      DGDEP_IGNOREBADSHEBANG: 1


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: echo variables
        run: |
          echo ${{ matrix.os }}
          echo ${{ runner.os }}
          echo $HOME
          echo $GITHUB_WORKSPACE
        #echo ${{ runner.build }}


      - name: apt-get pre-reqs for Ubuntu
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update 
          sudo apt-get install curl g++ build-essential python3-dev cmake libxerces-c-dev libexpat1-dev gfortran libhdf5-serial-dev git python3-venv python3-pip python3-tk mesa-common-dev libglu1-mesa-dev freeglut3-dev cm-super 
      
      - name: brew pre-reqs for MacOS
        if: runner.os == 'macOS'
        run: |
          brew install cmake python python-tk expat xerces-c git hdf5 freetype
      
      
      - name: Bypass dgdepfixers problems - Ubuntu
        if: runner.os == 'Linux'
        run: |
          mv $HOME/.profile $HOME/.profile_DISABLED  
          echo 'if [ -f $HOME/.bashrc ]; then . $HOME/.bashrc; fi' >> $HOME/.bash_profile 
        
      - name: Bypass dgdepfixers problems
        run: |
          git config --global user.name "Lorem Ipsum" 
          git config --global user.email "dolor.sit@ess.eu"


      - name: cache dgdepfixer install
        id: cache-dgdepfixer
        uses: actions/cache@v2
        with:
          path: ~/dgdepfixerInstall
          key: ${{ matrix.os }}-dgdepfixer-install

      - name: Create dgdepfixer
        if: steps.cache-dgdepfixer.outputs.cache-hit != 'true'
        run: |
          curl -OSsf https://storage.googleapis.com/dgdepfixer/dgdepfixer && chmod +x ./dgdepfixer
          ./dgdepfixer 
          ./dgdepfixer --create -d $HOME/dgdepfixerInstall
          . $HOME/dgdepfixerInstall/setup.sh 
      
    
      - name: cache Geant4
        id: cache-geant4
        uses: actions/cache@v2
        with:
          path: ~/geant4-10.04.p03
          key: ${{ matrix.os }}-Geant4--nodata-20211026
        
      - name: Install Geant4
        if: steps.cache-geant4.outputs.cache-hit != 'true'
        run: |
          . $HOME/dgdepfixerInstall/setup.sh 
          dgdepfixer --instsw=Geant4 --nodata -d $HOME/geant4-10.04.p03
 
      - name: cache untarred geant4 data files
        id: cache-untarred-geant4-data-files
        uses: actions/cache@v2
        with:
           path: ~/Geant4data
           key: untarred-geant4-data-files 
 
      - name: Download Geant4 data
        if: steps.cache-geant4.outputs.cache-hit != 'true' || steps.cache-untarred-geant4-data-files.outputs.cache-hit != 'true'
        run: | 
          curl -OSsf https://storage.googleapis.com/dgdepfixer/geant4DataProvider.sh && chmod +x ./geant4DataProvider.sh
          ./geant4DataProvider.sh

      #- name: Setup again
      #  run: |
      #    . $HOME/dgdepfixerInstall/setup.sh
        #  ls ~/dgdepfixer_install/extras/geant4-10.04.p03/share/Geant4-10.4.3/data
        # file ~/dgdepfixer_install/extras/geant4-10.04.p03/share/Geant4-10.4.3/data/G4ABLA3.1
           
      - name: test dgcode
        run: |
          . $HOME/dgdepfixerInstall/setup.sh
          . $HOME/geant4-10.04.p03/setup.sh
          curl -OSsf https://storage.googleapis.com/dgdepfixer/geant4DataSetup.sh
          . geant4DataSetup.sh
          . bootstrap.sh
          dgbuild -a
          dgbuild -t
        working-directory: dg_dgcode
   #    
   #   - name: Publish Test Report
   #     uses: mikepenz/action-junit-report@v2
   #     if: always() # always run even if the previous step fails
   #     with: 
   #         report_paths: '$GITHUB_WORKSPACE/dg_dgcode/.bld/testresults/dgtest_results_junitformat.xml'
#
   #   - name: Test Report
   #     uses: dorny/test-reporter@v1
   #     if:  always() # always run even if the previous step fails
   #     with:
   #       name: JEST Tests            # Name of the check run which will be created
   #       path: $GITHUB_WORKSPACE/dg_dgcode/.bld/testresults/dgtest_results_junitformat.xml    # Path to test results
   #       reporter: jest-junit        # Format of test results
#
#      - name: Publish Unit Test Results
#        uses: EnricoMi/publish-unit-test-result-action/composite@v1
#        if: always()
#        with:
#          files: $GITHUB_WORKSPACE/dg_dgcode/.bld/testresults/dgtest_results_junitformat.xml
    
