# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    #continue-on-error: true
    
    defaults:
      run:
        shell: bash
        #working-directory: todo
    env:
      SHELL: /bin/bash


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script to create dgdepfixer
        run: |
          sudo apt-get update 
          sudo apt-get install curl g++ build-essential python3-dev cmake libxerces-c-dev libexpat1-dev gfortran libhdf5-serial-dev git python3-venv python3-pip python3-tk mesa-common-dev libglu1-mesa-dev freeglut3-dev cm-super 
          curl -OSsf https://storage.googleapis.com/dgdepfixer/dgdepfixer && chmod +x ./dgdepfixer
          mv /home/runner/.profile /home/runner/.profile_DISABLED 
          echo 'if [ -f $HOME/.bashrc ]; then . $HOME/.bashrc; fi' >> /home/runner/.bash_profile 
          git config --global user.name "Lorem Ipsum" 
          git config --global user.email "dolor.sit@ess.eu"
          ./dgdepfixer 
          ./dgdepfixer --create 
          . /home/runner/dgdepfixer_install/setup.sh 
    
      - name: cache dgdepfixer extras
        id: cache-dgdepfixer-extras
        uses: actions/cache@v2
        with:
          path: /home/runner/dgdepfixer_install/extras
          key: ${{ runner.os }}-dgdepfixer-extras-Geant4--nodata_temp
        
      - name: Install Geant4
        if: steps.cache-dgdepfixer-extras.outputs.cache-hit != 'true'
        run: |
          . /home/runner/dgdepfixer_install/setup.sh 
          dgdepfixer --instsw=Geant4 --nodata
 
 
      - name: cache untarred geant4 data files
        id: cache-untarred-geant4-data-files
        uses: actions/cache@v2
        with:
           path: /home/runner/Geant4data
           key: untarred-geant4-data-files 
 
      - name: Download Geant4 gata and create symlinks
        if: steps.cache-dgdepfixer-extras.outputs.cache-hit != 'true' || steps.cache-untarred-geant4-data-files.outputs.cache-hit != 'true'
        run: | 
          curl -OSsf https://storage.googleapis.com/dgdepfixer/geant4DataProvider.sh && chmod +x ./geant4DataProvider.sh
          . geant4DataProvider.sh


      # Runs a set of commands using the runners shell
      - name: Setup again
        run: |
          . /home/runner/dgdepfixer_install/setup.sh
        # ls ~/dgdepfixer_install/extras/geant4-10.04.p03/share/Geant4-10.4.3/data
        # file ~/dgdepfixer_install/extras/geant4-10.04.p03/share/Geant4-10.4.3/data/G4ABLA3.1
           
      - name: test dgcode
        run: |
          ls
          . bootstrap.sh
          echo "end"
        ## dgbuild -a
        ## dgbuild -t
        working-directory: dg_dgcode
